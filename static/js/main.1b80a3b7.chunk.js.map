{"version":3,"sources":["App/components/Header.js","App/Analizador-lexico/categories/charConst.js","App/components/CardLex.js","App/components/CardSin.js","App/components/Form.js","App/Analizador-de-sintaxis/structures/syntaxAnalyzer.js","App/Analizador-lexico/automaton.js","App/Analizador-lexico/categories/separator.js","App/Analizador-lexico/categories/operator.js","App/Analizador-lexico/categories/numConst.js","App/Analizador-lexico/categories/identify.js","App/Analizador-lexico/categories/keyword.js","App/pages/home.js","App/index.js","index.js"],"names":["header","onSelect","activeKey","props","Header","Navbar","style","padding","Body","isCharConst","word","test","trim","CardLex","tokens","styleCenter","display","weight","dataStyle","fontSize","fontWeight","justifyContent","numberStyle","textAlign","paddingLeft","tags","key","tag","Tag","localeCompare","color","Panel","collapsible","bordered","marginTop","List","size","hover","map","item","index","Item","FlexboxGrid","justify","colspan","response","responseList","console","log","panelStyle","width","FormSirio","useState","cardLex","setCardLex","cardSin","setCardSin","textArea","setTextArea","Form","fluid","FormGroup","ControlLabel","value","setValue","height","language","inlineNumbers","borderRadius","tabSize","ButtonToolbar","Button","appearance","onClick","dictTokens","tokensList","push","toString","stack","state","forEach","pop","syntaxAnalyzer","text","textArray","split","textArrayCharConst","i","length","concat","expr","replaceAll","regex","RegExp","charAt","join","match","listaTokens","array","isOperator","acceptation","estate","symbol","isNumConst","isIdentifier","isKeyword","automaton","CardSin","Home","Container","Content","maxWidth","alignItems","Col","Row","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b80a3b7.chunk.js","sourcesContent":["import {\r\n    Header,\r\n    Navbar\r\n} from 'rsuite';\r\n\r\nfunction header({onSelect, activeKey, ...props}) {\r\n\r\n    const logoStyle = {\r\n        padding: \"20px\",\r\n    };\r\n\r\n    return (\r\n        <Header>\r\n            <Navbar {...props}>\r\n                <Navbar.Header>\r\n                    <div style={logoStyle}>\r\n                        SIRIO\r\n                    </div>\r\n                </Navbar.Header>\r\n                <Navbar.Body>\r\n                </Navbar.Body>\r\n            </Navbar>\r\n        </Header>\r\n    );\r\n}\r\n\r\nexport default header;\r\n\r\n\r\n\r\n","export default function isCharConst(word) {\r\n    let acceptation\r\n    const regex = /([\"'])((?:(?=(?:\\\\)*)\\\\.|.)*?)\\1/gm\r\n    acceptation = regex.test(word.trim())\r\n    return acceptation;\r\n}\r\n","import {\r\n    Panel,\r\n    List,\r\n    Tag,\r\n    FlexboxGrid\r\n} from 'rsuite';\r\n\r\nfunction CardLex({tokens, onSelect, activeKey, ...props}) {\r\n    //css\r\n    const panelStyle = {\r\n        marginTop: \"2%\"\r\n    }\r\n\r\n    const styleCenter = {\r\n        display: 'flex',\r\n        weight: \"20px\"\r\n    };\r\n\r\n    const dataStyle = {\r\n        fontSize: '1.2em',\r\n        fontWeight: 500,\r\n        justifyContent: 'left',\r\n    };\r\n    const numberStyle = {\r\n        fontSize: '1.2em',\r\n        fontWeight: 500,\r\n        textAlign:\"right\",\r\n        paddingLeft:\"1.2em\"\r\n    };\r\n\r\n    function tags(key) {\r\n        let tag = <Tag>No encontrado</Tag>\r\n\r\n        if (0 === key.localeCompare(\"Cadena de texto\")) {\r\n            tag = <Tag color=\"orange\">Cadena de texto</Tag>\r\n        }\r\n        if (0 === key.localeCompare(\"Palabra reservada\")) {\r\n            tag = <Tag color=\"blue\">Palabra reservada</Tag>\r\n        }\r\n        if (0 === key.localeCompare(\"Identificador\")) {\r\n            tag = <Tag color=\"green\">Identificador</Tag>\r\n        }\r\n        if (0 === key.localeCompare(\"Constante Numerica\")) {\r\n            tag = <Tag color=\"violet\">Constante Numérica</Tag>\r\n        }\r\n        if (0 === key.localeCompare(\"Operador\")) {\r\n            tag = <Tag color=\"cyan\">Operador</Tag>\r\n        }\r\n        if (0 === key.localeCompare(\"Separador\")) {\r\n            tag = <Tag color=\"red\">Separador</Tag>\r\n        }\r\n\r\n        return tag\r\n    }\r\n\r\n    return (\r\n\r\n        <Panel header=\"Analisis Léxico\" collapsible bordered style={panelStyle}>\r\n            <div >\r\n                <Panel bordered>\r\n                    <List size=\"sm\" hover>\r\n                        {tokens.map((item, index) => (\r\n                            <List.Item key={item['key']} index={index}>\r\n                                <FlexboxGrid justify={\"left\"}>\r\n                                    <FlexboxGrid.Item colspan={2} style={styleCenter}>\r\n                                        <div style={numberStyle}>\r\n                                            {index+1}.\r\n                                        </div>\r\n                                    </FlexboxGrid.Item>\r\n                                    <FlexboxGrid.Item colspan={4} style={styleCenter}>\r\n                                        <div style={{textAlign: 'right'}}>\r\n                                            <div>{tags(item['key'])}</div>\r\n                                        </div>\r\n                                    </FlexboxGrid.Item>\r\n                                    <FlexboxGrid.Item colspan={9} style={styleCenter}>\r\n                                        <div style={{textAlign: 'left'}}>\r\n                                            <div style={dataStyle}>{item['value']}</div>\r\n                                        </div>\r\n                                    </FlexboxGrid.Item>\r\n                                </FlexboxGrid>\r\n                            </List.Item>\r\n\r\n                        ))}\r\n                    </List>\r\n                </Panel>\r\n            </div>\r\n        </Panel>\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default CardLex;\r\n","import {\r\n    Panel\r\n} from 'rsuite';\r\n\r\nfunction CardLex({response, onSelect, activeKey, ...props}) {\r\n    //css\r\n    const panelStyle = {\r\n        marginTop: \"2%\"\r\n    }\r\n\r\n    const styleCenter = {\r\n        display: 'flex',\r\n        weight: \"20px\"\r\n    };\r\n\r\n    const dataStyle = {\r\n        fontSize: '1.2em',\r\n        fontWeight: 500,\r\n        justifyContent: 'left',\r\n    };\r\n    const numberStyle = {\r\n        fontSize: '1.2em',\r\n        fontWeight: 500,\r\n        textAlign:\"right\",\r\n        paddingLeft:\"1.2em\"\r\n    };\r\n\r\n    let responseList = response\r\n    console.log(response)\r\n    return (\r\n\r\n        <Panel header=\"Analisis Sintáctico\" collapsible bordered style={panelStyle}>\r\n            <div >\r\n                {responseList}\r\n            </div>\r\n        </Panel>\r\n\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default CardLex;\r\n","import React, {useState} from 'react';\r\nimport automaton from \"../Analizador-lexico/automaton\";\r\nimport CardLex from './CardLex';\r\nimport {CodeEditorEditable} from 'react-code-editor-editable'\r\nimport 'highlight.js/styles/atom-one-dark.css';\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    ControlLabel,\r\n    Button,\r\n    ButtonToolbar,\r\n    Panel\r\n} from 'rsuite';\r\nimport CardSin from \"./CardSin\";\r\nimport syntaxAnalyzer from \"../Analizador-de-sintaxis/structures/syntaxAnalyzer\";\r\n\r\n\r\nconst panelStyle = {\r\n    /* Extra small devices (phones, 600px and down) */\r\n    width: \"60rem\"\r\n}\r\n\r\n\r\nfunction FormSirio({onSelect, activeKey, ...props}) {\r\n    const [cardLex, setCardLex] = useState();\r\n    const [cardSin, setCardSin] = useState();\r\n    const [textArea, setTextArea] = useState(\"void main() {\\n  print('Hello, World!');\\n}\");\r\n\r\n    function showCard() {\r\n        if (0 !== textArea.trim().localeCompare(\"\")) {\r\n            let tokens = []\r\n            let response=\"\"\r\n            setCardLex()\r\n            tokens = automaton(textArea.trim())\r\n            response = syntaxAnalyzer(tokens)\r\n            setCardLex(\r\n                <CardLex\r\n                    tokens={tokens}\r\n                />\r\n            )\r\n            setCardSin(\r\n                <CardSin\r\n                    response={response}\r\n                />\r\n            )\r\n\r\n\r\n        } else {\r\n            setCardLex()\r\n        }\r\n    }\r\n\r\n    function clear() {\r\n        setTextArea(\"\")\r\n        setCardLex()\r\n        setCardSin()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Panel header=\"Analizador léxico y sintáctico\" bordered style={panelStyle}>\r\n                <p/>\r\n                <Form fluid>\r\n                    <FormGroup>\r\n                        <ControlLabel>Código Dart</ControlLabel>\r\n                        <CodeEditorEditable\r\n                            value={textArea}\r\n                            setValue={setTextArea}\r\n                            width='100%'\r\n                            height='40vh'\r\n                            language='dart'\r\n                            inlineNumbers\r\n                            borderRadius=\"8px\"\r\n                            tabSize={5}\r\n                        />\r\n\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <ButtonToolbar>\r\n                            <Button appearance=\"default\" color=\"green\" onClick={showCard}>Analizar</Button>\r\n                            <Button appearance=\"default\" onClick={clear}>Limpiar</Button>\r\n                        </ButtonToolbar>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Panel>\r\n            {cardLex}\r\n            {cardSin}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormSirio;\r\n","export default function syntaxAnalyzer(dictTokens) {\r\n    let tokensList = []\r\n\r\n\r\n    dictTokens.map(function (item) {\r\n        let key = item['key']\r\n        let value = item['value']\r\n\r\n        switch (key) {\r\n            case 'Palabra reservada':\r\n                tokensList.push(value.toString());\r\n                break;\r\n            case \"Identificador\":\r\n                tokensList.push(\"id\");\r\n                break;\r\n            case \"Separador\":\r\n                tokensList.push(value.toString());\r\n                break;\r\n            case \"Cadena de texto\":\r\n                tokensList.push(\"str\");\r\n                break;\r\n            case \"Constante Numérica\":\r\n                tokensList.push(\"num\");\r\n                break;\r\n            case \"Operador\":\r\n                tokensList.push(value.toString());\r\n                break;\r\n        }\r\n\r\n    })\r\n    let stack = [\"$0\"]\r\n    let state = 0\r\n    let accept = false\r\n    tokensList.forEach(function (item) {\r\n\r\n            switch (state) {\r\n                case 0:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"id\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"num\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 1:\r\n                    switch (item) {\r\n                        case \"+\":\r\n                            state = 7\r\n                            stack.push(\"+\")\r\n                            break;\r\n                        case \"-\":\r\n                            state = 8\r\n                            stack.push(\"-\")\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n                            accept = true\r\n\r\n                    }\r\n                case 2:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                    stack.pop()\r\n                case 3:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 4:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 5:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 6:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 7:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 8:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 9:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 10:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 11:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 12:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 13:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 14:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 15:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 16:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 17:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n                case 18:\r\n                    switch (item) {\r\n                        case \"(\":\r\n                            state = 4\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"id\":\r\n                            state = 5\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"num\":\r\n                            state = 6\r\n                            stack.push(\"(\")\r\n                            break;\r\n                        case \"E\":\r\n                            state = 1\r\n                            break;\r\n                        case \"T\":\r\n                            state = 2\r\n                            break;\r\n                        case \"F\":\r\n                            state = 3\r\n                            break;\r\n                        default:\r\n                            state = \"error\"\r\n\r\n                    }\r\n\r\n            }\r\n\r\n        }\r\n    )\r\n    return tokensList\r\n\r\n\r\n    console.log(tokensList)\r\n\r\n\r\n}\r\n","/* eslint-disable no-useless-escape */\r\nimport isCharConst from \"./categories/charConst\";\r\nimport isIdentifier from \"./categories/identify\";\r\nimport isKeyword from \"./categories/keyword\";\r\nimport isNumConst from \"./categories/numConst\";\r\nimport isOperator from \"./categories/operator\";\r\nimport isSeparator from \"./categories/separator\";\r\n\r\nexport default function automaton2(text) {\r\n\r\n    let textArray = text.split(/(?:([\"'])((?:(?=(?:\\\\)*)\\\\.|.)*?)\\1)/gm)\r\n    let textArrayCharConst = []\r\n    for (let i = 0; i < textArray.length; i) {\r\n        let value = textArray[i]\r\n        if (0 === value.localeCompare(\"\\\"\")) {\r\n            value = \"\\\"\".concat(textArray[i + 1], \"\\\"\")\r\n            i++\r\n        } else if (0 === value.localeCompare(\"\\'\")) {\r\n            value = \"\\'\".concat(textArray[i + 1], \"\\'\")\r\n            i++\r\n        }\r\n        textArrayCharConst.push(value)\r\n        i++\r\n    }\r\n\r\n    textArrayCharConst.forEach(function (value, index) {\r\n            let expr = textArrayCharConst[index];\r\n            if (!isCharConst(value)) {\r\n                //Se eliminan saltos de linea y tabulaciones\r\n                expr = expr.replaceAll(/\\n/g, \" \")\r\n                expr = expr.replaceAll(/\\t/g, \" \")\r\n\r\n                //Se aislan primero los signos que pueden generar cadenas de texto añadiendoles espacios.\r\n                expr = expr.replaceAll(/\"/g, ' \" ')\r\n                expr = expr.replaceAll(/'/g, \" ' \")\r\n\r\n                //se aislan los delimitadores o separadores\r\n                const separatorsList = [\"\\(\", \"\\)\", \"\\[\", \"\\]\", \"\\{\", \"\\}\", \";\", \",\", \":\"]\r\n                separatorsList.forEach(function (value) {\r\n                    let regex = new RegExp(\"\\\\\".concat(value), \"g\")\r\n                    expr = expr.replaceAll(regex, \" \".concat(value, \" \"))\r\n                })\r\n\r\n                //Se aislan los operadores + - * / % < > = ! & | ^ ~  ?\r\n                const operatorsList = [\"\\+\", \"-\", \"\\*\", \"\\/\", \"%\", \"<\", \">\", \"=\", \"!\", \"&\", \"\\|\", \"\\^\", \"~\", \"\\?\", \"\\.\"]\r\n                operatorsList.forEach(function (value) {\r\n                    let regex = new RegExp(\"\\\\\".concat(value), \"g\")\r\n                    expr = expr.replaceAll(regex, \" \".concat(value, \" \"))\r\n                })\r\n\r\n                //Se reagrupa el \".\" si esta entre numeros\r\n                expr = expr.replaceAll(/(?<=\\d)( \\. )(?=\\d)/g, \".\")\r\n                //Se reagrupa el \"-\" spara numeros negativos\r\n                expr = expr.replaceAll(/(- )(?=\\d)/g, \"-\")\r\n\r\n                //Se reagrupan los operadores compuestos triples\r\n                const tripleOperatorsList = [\"\\<\\<\\=\", \"\\>\\>\\=\", \"\\~\\/\\=]\", \"...\"]\r\n                tripleOperatorsList.forEach(function (value) {\r\n                    let regex = new RegExp(\"\\\\\".concat(value.charAt(0), \"\\\\s\\\\s\", \"\\\\\", value.charAt(1), \"\\\\s\\\\s\", \"\\\\\", value.charAt(2)), \"g\")\r\n                    expr = expr.replaceAll(regex, \" \".concat(value.charAt(0), value.charAt(1), value.charAt(2), \" \"))\r\n                })\r\n\r\n                //Se reagrupan los operadores compuestos dobles\r\n                const dobleOperatorsList = [\"\\+\\+\", \"–\\=\", \"\\/\\=\", \"\\%\\=\", \"\\^\\=\", \"\\+\\=\", \"\\*\\=\", \"\\&\\=\", \"\\|\\=\",\r\n                    \"\\|\\|\", \"\\&\\&\", \"\\+\\+\", \"\\-\\-\", \"\\<\\<\", \"\\>\\>\", \"\\=\\=\", \"\\!\\=\", \"\\>\\=\", \"\\<\\=\", \"\\~\\/\", \"\\?\\?\", \"\\?\\.\"]\r\n                dobleOperatorsList.forEach(function (value) {\r\n                    let regex = new RegExp(\"\\\\\".concat(value.charAt(0), \"\\\\s\\\\s\", \"\\\\\", value.charAt(1)), \"g\")\r\n                    expr = expr.replaceAll(regex, \" \".concat(value.charAt(0), value.charAt(1), \" \"))\r\n                })\r\n            }\r\n            textArrayCharConst[index] = expr;\r\n        }\r\n    )\r\n    text = textArrayCharConst.join(\" \");\r\n    //Se eliminan espacios dobles\r\n    text = text.trim();\r\n    text = text.replaceAll(/\\s{2,}/g, \" \");\r\n\r\n    //Se separa el texto por espacios simples\r\n    text = text.match(/[^\\s\"']+|(?:([\"'])((?:(?=(?:\\\\)*)\\\\.|.)*?)\\1)/g);\r\n\r\n    //Se tokeniza cada elemento de la lista text y se guarda en un array de tokens.\r\n    let listaTokens = [];\r\n    text.forEach(tokenizar);\r\n\r\n    function tokenizar(value, index, array) {\r\n        let key = \"No encontrado\"\r\n\r\n        if (isSeparator(value)) {\r\n            key = \"Separador\"\r\n        }\r\n        if (isOperator(value)) {\r\n            key = \"Operador\"\r\n        }\r\n        if (isNumConst(value)) {\r\n            key = \"Constante Numerica\"\r\n        }\r\n        if (isIdentifier(value)) {\r\n            key = \"Identificador\"\r\n        }\r\n        if (isKeyword(value)) {\r\n            key = \"Palabra reservada\"\r\n        }\r\n        if (isCharConst(value)) {\r\n            key = \"Cadena de texto\"\r\n        }\r\n\r\n        listaTokens.push({key: key, value: value})\r\n    }\r\n\r\n    return listaTokens\r\n}\r\n\r\n","export default function isSeparator(word) {\r\n    let acceptation\r\n    const regex = /(?:\\[|]|\\(|\\)|{|}|,|;|:|\\.{3})/g\r\n    acceptation = regex.test(word.trim())\r\n    return acceptation;\r\n}\r\n","export default function isOperator(word) {\r\n    let acceptation\r\n    const regex = /(?:<<=|>>=|~\\/=|–=|\\/=|%=|\\^=|\\+=|\\*=|&=|\\|=|\\|\\||&&|\\+\\+|--|<<|>>|==|!=|>=|<=|\\?\\?|\\?\\.|~\\/|!|&|\\||\\^|=|>|<|\\+|–|\\*|\\/|%|~|\\?|\\.|-)/g\r\n    acceptation = regex.test(word.trim())\r\n    return acceptation;\r\n}\r\n","export default function isNumConst(word) {\r\n    let estate = 0\r\n    let acceptation\r\n    word = word.split(\"\");\r\n    word.forEach(automaton);\r\n\r\n    function automaton(value, index, array) {\r\n        let symbol;\r\n        switch (value) {\r\n            case \"0\":\r\n            case \"1\":\r\n            case \"2\":\r\n            case \"3\":\r\n            case \"4\":\r\n            case \"5\":\r\n            case \"6\":\r\n            case \"7\":\r\n            case \"8\":\r\n            case \"9\":\r\n                symbol = \"d\"\r\n                break;\r\n            case \".\":\r\n                symbol = \".\"\r\n                break;\r\n            case\"e\":\r\n            case \"E\":\r\n                symbol = \"E\"\r\n                break;\r\n            case \"-\":\r\n                symbol = \"s\"\r\n                break;\r\n            default:\r\n                symbol = \"x\"\r\n                estate = 9\r\n                acceptation = false\r\n        }\r\n\r\n        switch (estate) {\r\n            case 0:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 2\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 8\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 1\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n\r\n                break;\r\n            case 1:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 2\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 8\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n\r\n                break;\r\n            case 2:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 2\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 34\r\n                        acceptation = true\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 5\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case 34:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 34\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 5\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case 5:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 7\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 6\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case 6:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 7\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case 7:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 7\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case 8:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 34\r\n                        acceptation = true\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n\r\n                break;\r\n            case 9:\r\n                switch (symbol) {\r\n                    case \"d\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \".\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"E\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    case \"s\":\r\n                        estate = 9\r\n                        acceptation = false\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    return acceptation;\r\n}\r\n","export default function isIdentifier(word) {\r\n    let acceptation\r\n    const regex = /^[a-zA-Z_$][a-zA-Z\\d_$]*$/gm\r\n    acceptation = regex.test(word.trim())\r\n    return acceptation;\r\n}\r\n","export default function isKeyword(word) {\r\n    let acceptation\r\n    const regex = /\\b(?:abstract|else|import|super|as|enum|in|switch|assert|export|interface|sync|async|extends|is|this|await|extensioyarn n|library|throw|break|external|mixin|true|case|factory|new|try|catch|false|null|typedef|class|final|on|var|const|finally|operator|void|continue|For|part|while|covarient|Function|rethrow|with|default|get|return|yield|deffered|hide|set|do|if|show|dynamic|implements|static)\\b/\r\n    acceptation = regex.test(word.trim())\r\n    return acceptation;\r\n}\r\n","import {\r\n    Container,\r\n    Content,\r\n    Row,\r\n    Col\r\n} from 'rsuite';\r\nimport Header from \"../components/Header\"\r\nimport Form from \"../components/Form\"\r\n\r\n\r\nfunction Home({onSelect, activeKey, ...props}) {\r\n\r\n    const containerStyle = {\r\n        height: \"100%\",\r\n        maxWidth: \"100%\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        padding: \"2%\"\r\n    };\r\n\r\n    return (\r\n\r\n        <Container>\r\n            <Header/>\r\n            <Content style={containerStyle}>\r\n                <Col>\r\n                    <Row>\r\n                        <Form/>\r\n                    </Row>\r\n                </Col>\r\n            </Content>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import Home from './pages/home'\r\n\r\nfunction App() {\r\n    return (\r\n            <Home/>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'rsuite/dist/styles/rsuite-dark.css';\r\nimport App from './App/index';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}